version: '3.9'

services:
  api-gateway:
    container_name: api-gateway
    build: api-gateway
    depends_on:
      account-service:
        condition: service_healthy
    ports:
      - "9000:9000"
    networks:
      - app-network

  account-service:
    container_name: account-service
    build: account-service
    depends_on:
      qr-food-ordering-mysql:
        condition: service_healthy
      qr-food-ordering-redis:
        condition: service_healthy
    ports:
      - "8081:8081"
    env_file:
      - .env
    networks:
      - app-network
      - db-network

  merchant-service:
    container_name: merchant-service
    build: merchant-service
    ports:
      - "8082:8082"
    env_file:
      - .env
    networks:
      - app-network
      - db-network

  menu-service:
    container_name: menu-service
    build: menu-service
    depends_on:
      qr-food-ordering-redis:
        condition: service_healthy
      qr-food-ordering-mongo:
        condition: service_healthy
    ports:
      - "8083:8083"
    env_file:
      - .env
    networks:
      - app-network
      - db-network

  order-service:
    container_name: order-service
    build: order-service
    depends_on:
      qr-food-ordering-mysql:
        condition: service_healthy
      qr-food-ordering-redis:
        condition: service_healthy
    ports:
      - "8084:8084"
    env_file:
      - .env
    networks:
      - app-network
      - db-network

  notification-service:
    container_name: notification-service
    build: notification-service
    depends_on:
      qr-food-ordering-redis:
        condition: service_healthy
      qr-food-ordering-mongo:
        condition: service_healthy
    ports:
      - "8085:8085"
    env_file:
      - .env
    networks:
      - app-network
      - db-network

  analytics-service:
    container_name: analytics-service
    build: analytics-service
    depends_on:
      qr-food-ordering-mongo:
        condition: service_healthy
    ports:
      - "8086:8086"
    env_file:
      - .env
    networks:
      - app-network
      - db-network

  qr-food-ordering-mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: Hop2005@
    ports:
      - "27017:27017"
    volumes:
      - qr-food-ordering-mongo-data:/data/db
    networks:
      - db-network
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5

  qr-food-ordering-redis:
    container_name: qr-food-ordering-redis
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - qr-food-ordering-redis-data:/data
    networks:
      - db-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 3

  qr-food-ordering-mysql:
    container_name: qr-food-ordering-mysql
    image: mysql:8.2.0
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: Hop2005@
      MYSQL_DATABASE: qr-food-ordering_db
    ports:
      - "3308:3306"
    volumes:
      - qr-food-ordering-mysql-data:/var/lib/mysql
    networks:
      - db-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  qr-food-ordering-redis-data:
  qr-food-ordering-mysql-data:
  qr-food-ordering-mongo-data:


networks:
  app-network:
    driver: bridge
  db-network:
    driver: bridge

#  docker exec -it qr-food-ordering-redis redis-cli
# docker compose up -d qr-food-ordering-app